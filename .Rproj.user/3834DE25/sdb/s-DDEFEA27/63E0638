{
    "collab_server" : "",
    "contents" : "# Example for Jags-Ymet-Xnom2fac-MrobustHet.R \n#------------------------------------------------------------------------------- \n# Optional generic preliminaries:\n# graphics.off() # This closes all of R's graphics windows.\n# rm(list=ls())  # Careful! This clears all of R's memory!\n#------------------------------------------------------------------------------- \n#Load The data file \n\nfileNameRoot = \"Assn3\" \ngraphFileType = \"eps\" \nmyDataFrame = read.csv( file=\"SocialSecNA.RM.csv\" )\n# Re-label and re-order the Pos factor:\nmyDataFrame$payment_type = factor( myDataFrame$payment_type, \n                          ordered=F)\n\nmyDataFrame$Commonwealth_Electoral_Division_Name = factor(myDataFrame$Commonwealth_Electoral_Division_Name,\n                                                          ordered=F)\n\n# Specify the column names in the data file relevant to the analysis:\nyName=\"amount\" \n# x1 should be factor with fewer levels, to plot in single pane:\nx1Name=\"payment_type\" \nx2Name=\"Commonwealth_Electoral_Division_Name\" \n# Specify desired contrasts.\n# Each main-effect contrast is a list of 2 vectors of level names, \n# a comparison value (typically 0.0), and a ROPE (which could be NULL):\n\nx1contrasts = list( \n  \n  # family_tax_benefit_a\n  list( c(\"family_tax_benefit_a\") , c(\"family_tax_benefit_b\") , compVal=0.0 , ROPE=c(-1000,1000) ) ,\n  list( c(\"family_tax_benefit_a\") , c(\"healthcare_card\") , compVal=0.0 , ROPE=c(-1000,1000) ) ,\n  \n  # family_tax_benefit_b\n  list( c(\"family_tax_benefit_b\") , c(\"healthcare_card\") , compVal=0.0 , ROPE=c(-1000,1000) )\n)\n\nx2contrasts = list( \n  \n  # Melbourne\n  list( c(\"Melbourne\") , c(\"Kooyong\") , compVal=0.0 , ROPE=c(-1000,1000) ) ,\n  list( c(\"Melbourne\") , c(\"Higgins\") , compVal=0.0 , ROPE=c(-1000,1000) ) ,\n  list( c(\"Melbourne\") , c(\"Gellibrand\") , compVal=0.0 , ROPE=c(-1000,1000) ) ,\n  \n  # Kooyong\n  list( c(\"Kooyong\") , c(\"Higgins\") , compVal=0.0 , ROPE=c(-1000,1000) ) ,\n  list( c(\"Kooyong\") , c(\"Gellibrand\") , compVal=0.0 , ROPE=c(-1000,1000) ) ,\n  \n  # Higgins\n  list( c(\"Higgins\") , c(\"Gellibrand\") , compVal=0.0 , ROPE=c(-1000,1000) )\n)\n\n# Each interaction contrast is a list of 2 lists of 2 vectors of level names, \n# a comparison value (typically 0.0), and a ROPE (which could be NULL)::\n\nx1x2contrasts = list(\n  \n  list( list( c(\"family_tax_benefit_a\") , c(\"family_tax_benefit_b\") ) ,\n        list( c(\"family_tax_benefit_b\") , c(\"healthcare_card\") ) ,\n        list( c(\"family_tax_benefit_a\") , c(\"healthcare_card\") ) ,\n                compVal=0.0 , ROPE=c(-1000,1000) ) ,\n  \n  list(  list( c(\"Melbourne\") , c(\"Kooyong\") ) ,\n         list( c(\"Melbourne\") , c(\"Higgins\") ) ,\n         list( c(\"Melbourne\") , c(\"Gellibrand\") ),\n         list( c(\"Kooyong\") , c(\"Higgins\") ) ,\n         list( c(\"Kooyong\") , c(\"Gellibrand\") ) ,\n        compVal=0.0 , ROPE=c(-1000,1000) ) ,\n  \n\n  list( list( c(\"healthcare_card\") , c(\"Melbourne\",\"Kooyong\",\"Higgins\",\"Gellibrand\") ) ,\n        list( c(\"Kooyong\") , c(\"family_tax_benefit_a\",\"family_tax_benefit_b\",\"healthcare_card\") ) , \n        compVal=0.0 , ROPE=c(-1000,1000) )\n) \n\n#------------------------------------------------------------------------------- \n# Load the relevant model into R's working memory:\nsource(\"Jags-Ymet-Xnom2fac-MrobustHet.Assn3.Run.R\")\n#------------------------------------------------------------------------------- \n# Generate the MCMC chain:\nhead(myDataFrame)\n\nmcmcCoda = genMCMC( datFrm=myDataFrame , \n                    yName=yName , x1Name=x1Name , x2Name=x2Name ,\n                    numSavedSteps=15000 , thinSteps=5 , saveName=fileNameRoot )\n#------------------------------------------------------------------------------- \n# Display diagnostics of chain, for specified parameters:\nparameterNames = varnames(mcmcCoda) \nshow( parameterNames ) # show all parameter names, for reference\nfor ( parName in c(\"b0\",\"b1[1]\",\"b2[1]\",\"b1b2[1,1]\",\"ySigma[1,1]\",\"ySigma[1,7]\",\"ySigma[5,7]\",\"nu\") ) {\n  diagMCMC( codaObject=mcmcCoda , parName=parName , \n            saveName=fileNameRoot , saveType=graphFileType )\n}\n#------------------------------------------------------------------------------- \n# Get summary statistics of chain:\nsummaryInfo = smryMCMC( mcmcCoda , \n                        datFrm=myDataFrame , x1Name=x1Name , x2Name=x2Name ,\n                        x1contrasts=x1contrasts , \n                        x2contrasts=x2contrasts , \n                        x1x2contrasts=x1x2contrasts ,\n                        saveName=fileNameRoot )\nshow(summaryInfo)\n# Display posterior information:\nplotMCMC( mcmcCoda , \n          datFrm=myDataFrame , yName=yName , x1Name=x1Name , x2Name=x2Name ,\n          x1contrasts=x1contrasts , \n          x2contrasts=x2contrasts , \n          x1x2contrasts=x1x2contrasts ,\n          saveName=fileNameRoot , saveType=graphFileType )\n#------------------------------------------------------------------------------- \n# Other specific comparisons of cells:\nif ( fileNameRoot == \"Assn3\" ) {\n  # THIS x1level minus THAT x1level at AT x2level:\n  THISx1 = \"healthcare_card\"\n  THATx1 = \"Melbourne\"\n  ATx2 = \"family_tax_benefit_b\"\n  THISidx = which(levels(myDataFrame[,x1Name])==THISx1)\n  THATidx = which(levels(myDataFrame[,x1Name])==THATx1)\n  ATidx   = which(levels(myDataFrame[,x2Name])==ATx2)\n  openGraph(height=4,width=4)\n  compInfo = plotPost( \n    as.matrix(mcmcCoda)[,paste(\"m[\",THISidx,\",\",ATidx,\"]\",sep=\"\")] -\n      as.matrix(mcmcCoda)[,paste(\"m[\",THATidx,\",\",ATidx,\"]\",sep=\"\")] , \n    main=paste(THISx1,\"-\",THATx1,\"@\",ATx2) , \n    xlab=paste(\"Difference in\",yName) , \n    compVal=0 ,ROPE=c(-1000,1000) )\n  show(compInfo)\n  saveGraph(file=paste(fileNameRoot,THISx1,\"-\",THATx1,\"At\",ATx2,sep=\"\"),\n            type=graphFileType)\n  # THIS x1level minus THAT x1level at AT x2level:\n  THISx1 = \"healthcare_card\"\n  THATx1 = \"Melbourne\"\n  ATx2 = \"family_tax_benefit_a\"\n  THISidx = which(levels(myDataFrame[,x1Name])==THISx1)\n  THATidx = which(levels(myDataFrame[,x1Name])==THATx1)\n  ATidx   = which(levels(myDataFrame[,x2Name])==ATx2)\n  openGraph(height=4,width=4)\n  compInfo = plotPost( \n    as.matrix(mcmcCoda)[,paste(\"m[\",THISidx,\",\",ATidx,\"]\",sep=\"\")] -\n      as.matrix(mcmcCoda)[,paste(\"m[\",THATidx,\",\",ATidx,\"]\",sep=\"\")] , \n    main=paste(THISx1,\"-\",THATx1,\"@\",ATx2) , \n    xlab=paste(\"Difference in\",yName) , \n    compVal=0 ,ROPE=c(-1000,1000) )\n  show(compInfo)\n  saveGraph(file=paste(fileNameRoot,THISx1,\"-\",THATx1,\"At\",ATx2,sep=\"\"),\n            type=graphFileType)\n  # THIS x2level minus THAT x2level at AT x1level:\n  THISx2 = \"PSY\"\n  THATx2 = \"ENG\"\n  ATx1 = \"healthcare_card\"\n  THISidx = which(levels(myDataFrame[,x2Name])==THISx2)\n  THATidx = which(levels(myDataFrame[,x2Name])==THATx2)\n  ATidx   = which(levels(myDataFrame[,x1Name])==ATx1)\n  openGraph(height=4,width=4)\n  compInfo = plotPost( \n    as.matrix(mcmcCoda)[,paste(\"m[\",ATidx,\",\",THISidx,\"]\",sep=\"\")] -\n      as.matrix(mcmcCoda)[,paste(\"m[\",ATidx,\",\",THATidx,\"]\",sep=\"\")] , \n    main=paste(THISx2,\"-\",THATx2,\"@\",ATx1) , \n    xlab=paste(\"Difference in\",yName) , \n    compVal=0 ,ROPE=c(-1000,1000) )\n  show(compInfo)\n  saveGraph(file=paste(fileNameRoot,THISx2,\"-\",THATx2,\"At\",ATx1,sep=\"\"),\n            type=graphFileType)\n}\n#-------------------------------------------------------------------------------",
    "created" : 1538542635605.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "488789557",
    "id" : "63E0638",
    "lastKnownWriteTime" : 1538638530,
    "last_content_update" : 1538638530620,
    "path" : "~/RMIT/2018 RMIT SEM 2/Applied Bayesian Statistics/Course Project/Bayesian.Course.Proj/Jags-Ymet-Xnom2fac-MrobustHet.Assn3.R",
    "project_path" : "Jags-Ymet-Xnom2fac-MrobustHet.Assn3.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}